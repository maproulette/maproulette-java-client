jacoco
{
    toolVersion = depJacocoVersion
}

checkstyle
{
    toolVersion = depCheckstyleVersion
}

spotbugs {
    ignoreFailures = true
}
spotbugsMain {
    reports {
        xml.required = false
        html.required = true
    }
}

sourceSets
{
    integrationTest
    {
        java
        {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

test
{
    useJUnitPlatform()
    testLogging
    {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging
    {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test
integrationTest.onlyIf { project.hasProperty('runIntegrationTests') }

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

configurations
{
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

spotless {
   java {
      importOrder 'static java', 'static javax', 'static org', 'static com', 'static scala', 'java', 'javax', 'org', 'com', 'scala', ''
      removeUnusedImports()
      eclipse().configFile 'config/format/code_format.xml'
   }
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.destination file("${buildDir}/reports/jacoco")
    }
}
