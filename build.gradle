plugins {
	id 'java'
	id 'maven'
	id 'maven-publish'
	id 'idea'
	id 'eclipse'
	id 'signing'
	id 'checkstyle'
	id 'jacoco'
	id "com.diffplug.gradle.spotless" version "3.27.0"
	id 'org.sonarqube' version '2.8'
	id "com.github.spotbugs" version "4.8.0"

	// Lombok plugin and gradle compat matrix https://stackoverflow.com/a/63736421
	id "io.freefair.lombok" version "5.1.1"
}

apply from: 'dependencies.gradle'
apply from: 'gradle/quality.gradle'

description = "MapRoulette Java Client"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

sourceCompatibility=11
targetCompatibility=11

repositories
{
    mavenCentral()
}

dependencies
{
    implementation packages.commons
    implementation packages.jackson
    implementation packages.slf4j.api
    implementation packages.http

    // Lombok Annotations
    implementation packages.lombok
    annotationProcessor packages.lombok

    testImplementation packages.slf4j.simple
    testImplementation packages.junit
    testImplementation packages.mockito

    integrationTestImplementation packages.slf4j.simple
    integrationTestImplementation packages.junit

    checkstyle packages.checkstyle
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

artifacts
{
    archives javadocJar, sourcesJar
}

/*
 * This is to skip the tasks for which there is a skip<TaskName>=true
 * environment variable
 */
def skippedTaskNames = System.getenv().findAll { key, value ->
    key.startsWith("skip") && value.equalsIgnoreCase("true")
}.keySet().collect { it.substring(4) }
gradle.startParameter.excludedTaskNames += skippedTaskNames

idea {
    project {
        languageLevel = '11'
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(sourcesJar)
            artifact(javadocJar)

            pom {
                name = project_name
                description = project_description
                url = project_url

                scm {
                    connection = project_scm
                    developerConnection = project_scm
                    url = project_url
                }

                licenses {
                    license {
                        name = project_license_slug
                        url = project_license_url
                    }
                }

                developers {
                    developer {
                        id = project_developer
                        name = project_developer
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "localPublish"
            url = layout.buildDirectory.dir('repos/localpublish')
        }
        if (Boolean.valueOf(project.property("publishSnapshot"))) {
            maven {
                name = "sonatypeSnapshots"
                url = "https://oss.sonatype.org/content/repositories/snapshots/"
                credentials {
                    username = System.getenv('SONATYPE_USERNAME')
                    password = System.getenv('SONATYPE_PASSWORD')
                }
            }
        }
        if (isReleaseVersion) {
            maven {
                name = sonatypeMaven2
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                credentials {
                    username = System.getenv('SONATYPE_USERNAME')
                    password = System.getenv('SONATYPE_PASSWORD')
                }
            }
        }
    }
}
